/* This is a beanshell script for MicroManager that will acquire a time series
image stack using a Raptor Ninox SWIR camera with exposure time, frame 
interval, and filename outlined in the multi-D acquisition window.
It should be run from the scripting window in MicroManager.
The script acquires images, sends a TTL pulse for triggering
electrical or optical stimulation at a given frame, as well as triggers 
optical shutters/laser despeckler, and the camera hardware of a ThorCam controlled
camera for obtaining visible images. All states are controlled using an Arduino
as a universal shutter controller.
*/
// ##### SET STIMULATION FRAME #####
STIM_FRAME = 200; // <- Edit here only

// ##### DO NOT EDIT BELOW #####
// clear all previous acquisitions
if (mmc.isSequenceRunning(mmc.getCameraDevice())){
mmc.stopSequenceAcquisition();
}
gui.closeAllAcquisitions();
gui.clearMessageWindow();

// Parameters
stimFrame = STIM_FRAME; // Enter stim frame here
acqSettings = gui.getAcquisitionSettings();
nrFrames = acqSettings.numFrames;
frameInterval = acqSettings.intervalMs;
acqName = acqSettings.prefix;
rootDirName = acqSettings.root;
camera = mmc.getCameraDevice();
nrChannels = nrSlices = nrPositions = 1;

gui.openAcquisition(acqName, rootDirName,
   nrFrames, nrChannels, nrSlices, nrPositions,
   /* show */ true,
   /* save */ true);

width = (int) mmc.getImageWidth();
height = (int) mmc.getImageHeight();
bytesPerPixel = (int) mmc.getBytesPerPixel();
// bitDepth = (int) mmc.getImageBitDepth();
// bitDepth = int 14;

gui.initializeAcquisition(acqName, width, height, bytesPerPixel, 14);

mmc.startSequenceAcquisition(nrFrames, frameInterval, true);
frame = 0;
exposureMs = mmc.getExposure();
mmc.setProperty("Arduino-Switch","State",8); //Set arduino state to turn on despeckler (binary 8 = pin 11)
mmc.setProperty("Arduino-Shutter","OnOff", 1); // Open arduino "shutter"
now = System.currentTimeMillis();

while (mmc.getRemainingImageCount() > 0 || mmc.isSequenceRunning(mmc.getCameraDevice())) {
   if (mmc.getRemainingImageCount() > 0) {
if (frame==stimFrame){
mmc.setProperty("Arduino-Switch","State",40); // Set arduino state to high on pin 11 (despeckler) and pin 13 (to Master 8). binary 8+32 = pins 11 and 13
gui.sleep(5);
mmc.setProperty("Arduino-Switch","State",8); //Set arduino state to turn on despeckler (binary 8 = pin 11)
}
      now = System.currentTimeMillis();
// Collect Ninox Image
      img = mmc.popNextTaggedImage();
      // Trigger ThorCam
      mmc.setProperty("Arduino-Switch","State",24); // Set arduino state to high on pin 11 (despeckler) and pin 12 (to Thorcam). binary 8+16 = pins 11 and 12
      // Add Ninox image to display
      gui.addImageToAcquisition(acqName, frame, 0, 0, 0, img);
      // Set ThorCam trigger to LOW while leaving despeckler on
      mmc.setProperty("Arduino-Switch","State",8); //Set arduino state to turn on despeckler (binary 8 = pin 11)
      // The above mmc.setProperty ("Arduino... >> appears to be a frame rate limiting step
      frame++;
      // Determine interval timing
      itTook = System.currentTimeMillis() - now;
      int timeDiff = frameInterval - itTook;
      if (timeDiff>0) {
     gui.sleep(timeDiff);
     itTook = System.currentTimeMillis() - now;
      }
      gui.message("Frame: "+ frame + " | Interval: " + itTook+ " ms");
     
   }
   else {
      mmc.sleep(Math.min(0.5 * exposureMs, 20));
   }
}

mmc.stopSequenceAcquisition();
mmc.setProperty("Arduino-Switch","State",0); //Set all arduino pins to 0
mmc.setProperty("Arduino-Shutter","OnOff", 0); // Close arduino "shutter"
gui.message("Acquisition Complete");
